{"ast":null,"code":"// Adapted from:\n// https://github.com/mrdoob/three.js/blob/dev/src/geometries/SphereGeometry.js\n// @author mrdoob / http://mrdoob.com/\n// @author benaadams / https://twitter.com/ben_a_adams\n// @author Mugen87 / https://github.com/Mugen87\n// The MIT License\n// Copyright © 2010-2019 three.js authors\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nexport default function SphereGeometry() {\n  var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  var widthSegments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n  var heightSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 6;\n  var phiStart = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var phiLength = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Math.PI * 2;\n  var thetaStart = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n  var thetaLength = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : Math.PI;\n  widthSegments = Math.max(3, Math.floor(widthSegments));\n  heightSegments = Math.max(2, Math.floor(heightSegments));\n  var thetaEnd = thetaStart + thetaLength;\n  var ix,\n    iy,\n    index = 0;\n  var grid = [];\n  var vertex = new Array(3);\n  var normal = new Array(3);\n  var indices = [];\n  var vertices = [];\n  var normals = [];\n  var uvs = [];\n  for (iy = 0; iy <= heightSegments; iy++) {\n    var verticesRow = [];\n    var v = iy / heightSegments;\n    var uOffset = iy == 0 ? 0.5 / widthSegments : iy == heightSegments ? -0.5 / widthSegments : 0;\n    for (ix = 0; ix <= widthSegments; ix++) {\n      var u = ix / widthSegments;\n      vertex[0] = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n      vertex[1] = radius * Math.cos(thetaStart + v * thetaLength);\n      vertex[2] = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n      vertices.push.apply(vertices, vertex);\n      normal[0] = vertex[0];\n      normal[1] = vertex[1];\n      normal[2] = vertex[2];\n      var len = Math.sqrt(normal[0] * normal[0] + normal[1] * normal[1] + normal[2] * normal[2]);\n      normal[0] *= 1 / (len || 1);\n      normal[1] *= 1 / (len || 1);\n      normal[2] *= 1 / (len || 1);\n      normals.push.apply(normals, normal);\n      uvs.push(u + uOffset, 1 - v);\n      verticesRow.push(index++);\n    }\n    grid.push(verticesRow);\n  }\n  for (iy = 0; iy < heightSegments; iy++) {\n    for (ix = 0; ix < widthSegments; ix++) {\n      var a = grid[iy][ix + 1];\n      var b = grid[iy][ix];\n      var c = grid[iy + 1][ix];\n      var d = grid[iy + 1][ix + 1];\n      if (iy !== 0 || thetaStart > 0) indices.push(a, b, d);\n      if (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);\n    }\n  }\n  return {\n    indices: indices,\n    vertices: vertices,\n    normals: normals,\n    uvs: uvs\n  };\n}","map":{"version":3,"names":["SphereGeometry","radius","arguments","length","undefined","widthSegments","heightSegments","phiStart","phiLength","Math","PI","thetaStart","thetaLength","max","floor","thetaEnd","ix","iy","index","grid","vertex","Array","normal","indices","vertices","normals","uvs","verticesRow","v","uOffset","u","cos","sin","push","apply","len","sqrt","a","b","c","d"],"sources":["/Users/ifeoma/Documents/Documents - Ifeoma’s MacBook Air/Master's/Westcliff/SPRG24/WEB 603 - Full Stack Web Development/full-stack-web-dev-wk-7/Day 1/m6-w7-d1-demo/light-orb-animation-app/node_modules/@react-vertex/geometry-hooks/src/sphereGeometry.ts"],"sourcesContent":["// Adapted from:\n// https://github.com/mrdoob/three.js/blob/dev/src/geometries/SphereGeometry.js\n\n// @author mrdoob / http://mrdoob.com/\n// @author benaadams / https://twitter.com/ben_a_adams\n// @author Mugen87 / https://github.com/Mugen87\n\n// The MIT License\n// Copyright © 2010-2019 three.js authors\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default function SphereGeometry(\n  radius: number = 1,\n  widthSegments: number = 8,\n  heightSegments: number = 6,\n  phiStart: number = 0,\n  phiLength: number = Math.PI * 2,\n  thetaStart: number = 0,\n  thetaLength: number = Math.PI,\n) {\n  widthSegments = Math.max(3, Math.floor(widthSegments))\n  heightSegments = Math.max(2, Math.floor(heightSegments))\n\n  const thetaEnd = thetaStart + thetaLength\n\n  let ix,\n    iy,\n    index = 0\n\n  const grid = []\n\n  const vertex = new Array(3)\n  const normal = new Array(3)\n\n  const indices = []\n  const vertices = []\n  const normals = []\n  const uvs = []\n\n  for (iy = 0; iy <= heightSegments; iy++) {\n    const verticesRow = []\n\n    const v = iy / heightSegments\n\n    const uOffset =\n      iy == 0\n        ? 0.5 / widthSegments\n        : iy == heightSegments\n        ? -0.5 / widthSegments\n        : 0\n\n    for (ix = 0; ix <= widthSegments; ix++) {\n      const u = ix / widthSegments\n\n      vertex[0] =\n        -radius *\n        Math.cos(phiStart + u * phiLength) *\n        Math.sin(thetaStart + v * thetaLength)\n      vertex[1] = radius * Math.cos(thetaStart + v * thetaLength)\n      vertex[2] =\n        radius *\n        Math.sin(phiStart + u * phiLength) *\n        Math.sin(thetaStart + v * thetaLength)\n\n      vertices.push(...vertex)\n\n      normal[0] = vertex[0]\n      normal[1] = vertex[1]\n      normal[2] = vertex[2]\n\n      const len = Math.sqrt(\n        normal[0] * normal[0] + normal[1] * normal[1] + normal[2] * normal[2],\n      )\n\n      normal[0] *= 1 / (len || 1)\n      normal[1] *= 1 / (len || 1)\n      normal[2] *= 1 / (len || 1)\n\n      normals.push(...normal)\n\n      uvs.push(u + uOffset, 1 - v)\n      verticesRow.push(index++)\n    }\n\n    grid.push(verticesRow)\n  }\n\n  for (iy = 0; iy < heightSegments; iy++) {\n    for (ix = 0; ix < widthSegments; ix++) {\n      const a = grid[iy][ix + 1]\n      const b = grid[iy][ix]\n      const c = grid[iy + 1][ix]\n      const d = grid[iy + 1][ix + 1]\n\n      if (iy !== 0 || thetaStart > 0) indices.push(a, b, d)\n      if (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d)\n    }\n  }\n\n  return { indices, vertices, normals, uvs }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}